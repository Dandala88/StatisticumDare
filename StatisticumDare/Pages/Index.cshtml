@page "{ludumUser}"
@model IndexModel
@{
ViewData["Title"] = "Home page";
var games = Model?.LudumDareData?.Games;
}

@section Header {
    <div class="input">
        <input id="usernameInput" type="text" placeholder="Lookup username" />
        <button onclick="navToUsername()" onkeypress="searchUser()">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                <path fill="currentColor"
                    d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
            </svg>
        </button>
        <script>
            function navToUsername() {
                var newUsername = document.getElementById("usernameInput").value;
                if (newUsername) window.location.href = "/" + newUsername;
            }

            document.getElementById("usernameInput").addEventListener("keypress", (e) => {
                if (e.keyCode === 13) navToUsername()
            })

            function searchUser() {

            }
        </script>
    </div>
}

 @if(games == null)
 {
    <div class="gamesContainer">
        <div class="gameWrapper">
            <div class="gameContainer" style="padding-bottom: 16px">
                <h3>User does not exist.</h3>
            </div>
            <div class="gameFooter">
             </div>
        </div>
    </div>
 }
 else
 {
    <div class="gamesContainer">
        @foreach (var game in games) { var ldUrl="https://ldjam.com" + game.Path;
        <div class="gameWrapper">
        <div class="gameContainer">
            <img src=@game.Cover />
            <div class="gameInfo">
                <div class="gameInfoHeader">
                    <div class="row">
                        <a href=@ldUrl target="_blank" class="gameInfoTitle">
                            <h3>@game.Name</h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" width="25" height="25">
                                <path fill="currentColor"
                                    d="M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z" />
                            </svg>
                        </a>
                        <div>
                            <h4 class="edition">LD @game.Edition</h4>
                            <h4 class="type">@game.Format</h4>
                        </div>
                    </div>
                    <h4>@game.SubmittedDate.ToString("MM/dd/yyyy")</h4>
                </div>
                <table class="data">
                    <tr>
                        <th width="120px">Category</th>
                        <th width="99%"></th>
                        <th width="60px">Place</th>
                        <th width="60px">Score</th>
                        <th width="60px">Count</th>
                    </tr>
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Overall", game.Overall))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Fun", game.Fun))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Innovation", game.Innovation))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Theme", game.Theme))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Graphics", game.Graphics))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Audio", game.Audio))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Humor", game.Humor))
                    @await Component.InvokeAsync("GameData", new Pages.Components.GameData.CategoryModel("Mood", game.Mood))
                </table>
            </div>
        </div>
        <div class="gameFooter">
        
            <button onclick="(function() {
                    document.documentElement.style.setProperty('--target-overall', '@(game.Overall.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-fun', '@(game.Fun.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-innovation', '@(game.Innovation.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-theme', '@(game.Theme.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-graphics', '@(game.Graphics.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-audio', '@(game.Audio.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-humor', '@(game.Humor.AverageScore/5*100)%');
                    document.documentElement.style.setProperty('--target-mood', '@(game.Mood.AverageScore/5*100)%');
                })()">
                Set as compare target 
            </button>
        </div>
        </div>
        }
    </div>
}